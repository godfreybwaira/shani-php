@use '../global/vars';
@use '../global/callables' as cb;
@use '../global/extensions';
@use '../global/colors';
@use 'sass:math';
@use 'sass:color';

$colors: colors.get();
@mixin _bgColor($color, $brightness) {
    background-color: color.scale($color, $lightness: $brightness);
}

.tag {

    $tag: &;
    @extend %flexCenter, %inlineFlex;

    &-group {
        $radius: map-get(vars.$borderRadius, 'xs');
        @extend %inlineFlex;

        &>:not(:first-child) {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        &>:not(:last-child) {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        &>:last-child:not(#{$tag}-type-1) {
            border-top-right-radius: $radius;
            border-bottom-right-radius: $radius;
        }

        &>:first-child:not(#{$tag}-type-1) {
            border-top-left-radius: $radius;
            border-bottom-left-radius: $radius;
        }

        &>#{$tag}-type-1:not(:only-child, :first-child) {
            border-left: none;
        }

    }

    &:hover {
        text-decoration: none;
    }

    $tagSize: vars.size('sm','md');

    @each $key,
    $val in $tagSize {
        &-size-#{$key} {
            @extend %height-#{$key}, %paddingY-#{$key};
        }
    }

    &:not([class*=color-]) {
        @extend %greyBorder;
    }

    &-type {
        &-1 {
            color: colors.getTextColor();
            @extend %posRelative, %roundCorner;

            @each $key,
            $val in $tagSize {
                &#{$tag}-size-#{$key} {
                    $len: math.div(vars.size($key), 3.5);
                    gap: $len;

                    &:before {
                        width: $len;
                        height: $len;
                    }
                }
            }

            &[class*=color-] {
                &:before {
                    @extend %emptyContent, %roundCorner;
                }
            }

            @each $key,
            $val in $colors {
                &-color-#{$key} {
                    border: cb.px2rem(1px) solid $val;

                    &:before {
                        @extend %color-#{$key};
                    }

                    &:hover {
                        @include _bgColor($val, 75%);
                    }
                }
            }
        }

        &-2 {
            @extend %radiusDefault;

            @each $key,
            $val in $colors {
                &.color-#{$key}:hover {
                    @include _bgColor($val, -25%);
                }
            }

            &:not([class*=color-]) {
                color: currentColor;
                background-color: map-get($colors, 'grey');
            }
        }
    }
}