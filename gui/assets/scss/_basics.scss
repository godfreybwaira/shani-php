@use 'utils/callables/functions' as fn;
@use 'utils/callables/extensions' as ext;
@use 'utils/callables/variables' as var;
@use 'sass:color';
@use 'sass:math';

@mixin _createColors($action_colors, $accent_color){
    $median: 10;
    @for $i from 1 through 19 {
        $color: color.scale($accent_color, $lightness: ($i - $median) * 10%);
        @if($i == $median){
            --theme-color:#{$color};
            --theme-text: #{fn.getTextColor($color)};
        }
        @else{
            --color-#{$i}:#{$color};
        }
    }
    @each $name,$color in $action_colors{
        .color-#{$name}{
            color: mix($color, #222, 5%);
            background-color: $color;
        }
    }
}

@mixin _createAccentColors($accent_color){
    $median: 10;
    @for $i from 1 through 19 {
        $color: color.scale($accent_color, $lightness: ($i - $median) * 10%);
        @if($i == $median){
            .color-theme,.color-theme-hover:hover{
                @extend %theme_color;
            }
        }
        @else{
            .color-#{$i},.color-#{$i}-hover:hover{
                color: fn.getTextColor($color);
                background-color: var(--color-#{$i});
            }
        }
    }
}

@mixin _createColumns($breakpoints,$columns) {
    $ratio: math.div(100%, $columns);
    @each $key, $size in $breakpoints {
        @include ext.media($size) {
            @for $col from 1 through $columns {
                .width-#{$key}-#{$col} {
                    width: $ratio * $col;
                }
                .height-#{$key}-#{$col} {
                    height: $ratio * $col;
                }
            }
        }
    }
}

@mixin _createSpacing($name){
    .#{$name}-x{
        @extend %#{$name}_x;
    }
    .#{$name}-y{
        @extend %#{$name}_y;
    }
    .#{$name}-xy{
        @extend %#{$name}_xy;
    }
    .#{$name}-x-sm{
        @extend %#{$name}_x_sm;
    }
    .#{$name}-y-sm{
        @extend %#{$name}_y_sm;
    }
    .#{$name}-xy-sm{
        @extend %#{$name}_xy_sm;
    }
    .#{$name}-md{
        @extend %#{$name}_md;
    }
    .#{$name}-sm{
        @extend %#{$name}_sm;
    }
}
:root{
    @include _createColors(var.$action_colors,var.$accent_color);
    --font-grey: #555;
    --spacing:#{var.$spacing};
    --font-size:#{var.$font_size};
    --accent-color:#{var.$accent_color};
    --thin-border: #{fn.getBorder()};
    --fg-color-1: #{var.$fg_color_1};
    --fg-color-2: #{var.$fg_color_2};
    --hover-color-1: rgba(0,0,0,.2);
    --hover-color-2: var(--color-18);
    --border-color: #{var.$fg_border_color};
    --bg-color: #{var.$bg_color};
    --shadow-sm: #{map-get(var.$shadows,sm)};
    --shadow-md: #{map-get(var.$shadows,md)};
    --spacing-md: calc(var(--spacing)/2) var(--spacing);
    --spacing-sm: calc(var(--spacing)/4) calc(var(--spacing)/2);
    --radius-sm: #{map-get(var.$border_radius,sm)};
}
*,:before,:after{
    transition: all .3s;
}
.shadow-sm{
    @extend %box_shadow_sm;
}
.shadow-md{
    @extend %box_shadow_md;
}
.font-sm{
    @extend %font_sm;
}
.container{
    @extend %position_relative;
}
.full-size{
    @extend %full_size;
}
.radius-sm{
    border-radius: var(--radius-sm);
}
.borders{
    border: var(--thin-border);
}
.border-h>:not(:first-child){
    border-top: var(--thin-border);
}
.hide{
    display: none;
}
.justify-right{
    display: grid;
    justify-content: right;
}
.justify-center>*{
    margin: 0 auto;
}
.stripes{
    &-even {
        &>:not(:hover,.active):nth-of-type(2n) {
            background-color: var(--fg-color-1);
        }
    }
    &-odd {
        &>:not(:hover,.active):nth-of-type(2n+1) {
            background-color: var(--fg-color-1);
        }
    }
}

input:invalid {
    color: map-get(var.$action_colors,danger);
}
select{
    appearance: none;
    background: none;
}
@include _createSpacing(margin);
@include _createSpacing(padding);
@include _createAccentColors(var.$accent_color);
@include _createColumns(var.$breakpoints,var.$grid_colmns);