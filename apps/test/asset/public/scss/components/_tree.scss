@use 'sass:math';
@use '../global/vars';
@use '../global/extensions' as xt;
@use '../global/callables' as cb;

$angle: 45deg;
$left_padding: map-get(vars.$paddingSquare, 'md');
$left_gap: $left_padding * -1;

@mixin _setSize($size) {
    &-size-#{$size} li>:first-child {
        min-height: vars.size($size);
        font-size: vars.fontSize($size);
    }
}

.tree {
    $tree: &;
    padding-left: $left_padding;
    @extend %resetList;
    @include _setSize('sm');
    @include _setSize('md');

    &>:not(.active) {
        &>:not(:first-child) {
            height: 0;
            overflow: hidden;
        }

        &>:first-child:before {
            transform: rotate($angle);
        }
    }

    &>.active>:first-child:before {
        transform: rotate($angle * 3);
    }

    a {
        color: currentColor;

        &:hover {
            text-decoration: none;
        }
    }

    // &-title+& {
    //     @extend %posRelative;

    //     &:before {
    //         @extend %emptyContent, %posAbsolute;
    //         border-left: cb.px2rem(1px) dotted #000;
    //         left: $left_gap * 0.9;
    //         height: calc(100% - $left_padding);
    //     }

    //     &>*>#{$tree}-title {
    //         @extend %posRelative;
    //         &:after{
    //             content: '';
    //             border-bottom: cb.px2rem(1px) dotted #000;
    //             left: $left_padding * -1.9;
    //             width: $left_padding;
    //             @extend %emptyContent, %posAbsolute;
    //         }
    //     }
    // }

    li>:first-child {
        $dim: cb.px2rem(5px);
        align-items: center;
        @extend %inlineFlex, %cursorPointer, %posRelative;

        &:not(:only-child):before {
            height: $dim;
            width: $dim;
            left: $left_gap;
            $border: cb.px2rem(1px) solid currentColor;
            border-right: $border;
            border-top: $border;
            @extend %emptyContent, %posAbsolute;
        }
    }
}