@use '../global/vars';
@use '../global/extensions';
@use '../global/callables' as cb;
@use '../global/colors';
@use 'sass:math';

$position: 50%;
$dim: vars.size('md');

%_vboxShadow{
    box-shadow: 0 cb.px2rem(1px) cb.px2rem(3px) colors.boxShadow();
}

%_flexColumn {
    flex-direction: column;
}

.layout {

    &-container {
        @extend %fullHeight, %flexible, %_flexColumn;

        @include cb.media(map-get(vars.$breakpoints, 'md')) {
            & {
                flex-direction: row;
            }
        }
    }

    &-content {
        flex: 1;
        overflow: hidden;
        @extend %flexible, %_flexColumn;

        @include cb.media(map-get(vars.$breakpoints, 'md')) {
            & {
                order: 1;
            }
        }
    }

    &-menubar {
        @extend %zIndex-md, %posRelative, %_vboxShadow;

        @include cb.media(map-get(vars.$breakpoints, 'md')) {
            & {
                height: 100%;
                max-width: $dim * 2.125;
            }
        }
    }
}

.menubar {
    $back_color: colors.lightenPrimary(-1);
    $front_color: colors.lightenPrimary(0);

    background-color: $back_color;
    color: colors.getTextColor($back_color);
    overflow: auto hidden;
    justify-content: space-between;
    @extend %flexible;

    &-menu {
        padding: 0;
        @extend %flexible, %resetList;

        &>* {
            @extend %flexible, %posRelative;

            &:hover {
                @extend %cursorPointer;
            }

            &.hover-menu,
            &:hover {
                background-color: $front_color;
            }

            &.hover-menu {
                color: currentColor;
            }

            &:not(.hover-menu) {
                color: colors.decide(#ababab, rgba(colors.getTextColor($back_color), 0.6), $back_color);
            }

            &:not(.active):before {
                width: 0;
            }

            &>a {
                color: inherit;
                text-decoration: none;
                @extend %flexible, %fullWidth, %flexCenter;
            }

            &:before {
                width: 50%;
                left: $position;
                bottom: cb.px2rem(4px);
                height: cb.px2rem(2px);
                background-color: currentColor;
                transform: translateX(-$position);
                @extend %posAbsolute, %emptyContent, %roundCorner;
            }
        }
    }

    & &-submenu {
        display: none;
    }

    &-content {
        top: 0;
        height: 0;
        opacity: 0;
        z-index: -1;
        overflow: hidden auto;
        background-color: $front_color;
        color: colors.getTextColor($front_color);
        @extend %fullWidth, %posAbsolute, %_vboxShadow;

        $translate: 100%;
        @at-root &-show {
            opacity: 1;
            height: 50vh;
            transform: translateY(-$translate);
        }

        @include cb.media(map-get(vars.$breakpoints, 'md')) {
            & {
                right: 0;
                height: 100%;
                width: 40vw;
            }

            @at-root &-show {
                transform: translateX($translate);
            }
        }
    }

    @include cb.media(map-get(vars.$breakpoints, 'md')) {
        & {
            height: 100%;
            overflow: hidden auto;

            &,
            &>* {
                flex-direction: column;
            }
        }
    }
}

.content {

    &-body {
        overflow: hidden auto;
        @extend %flex-1;

        &>object {
            min-height: 100%;
        }
    }

    &-navbar {
        align-items: center;
        justify-content: space-between;
        @extend %zIndex-sm, %flexible;

        a:hover {
            text-decoration: none;
        }

        &-type {
            &-1 {
                @extend %paddingY-md;

                &:first-child {
                    border-bottom: colors.line('md');
                }

                &:last-child {
                    border-top: colors.line('md');
                }

            }

            &-2 {
                @extend %padding-md;

                &:first-child {
                    background: linear-gradient(colors.shadow(), transparent);
                }

                &:last-child {
                    background: linear-gradient(transparent, colors.shadow());
                }

            }
        }
    }
}